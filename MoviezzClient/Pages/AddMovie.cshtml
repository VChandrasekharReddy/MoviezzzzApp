@page
@model MoviezzClient.Pages.AddMovieModel

@{
    ViewData["Title"] = "Add Movie";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h2 class="mb-0">Add New Movie</h2>
                </div>
                <div class="card-body">
                    <form method="post" asp-page-handler="AddMovie">
                        <div class="row">
                            <!-- Title -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Movie.Title" class="form-label">Title *</label>
                                <input asp-for="Movie.Title" class="form-control" required />
                                <span asp-validation-for="Movie.Title" class="text-danger"></span>
                            </div>

                            <!-- Duration -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Movie.Duration" class="form-label">Duration (minutes) *</label>
                                <input asp-for="Movie.Duration" type="number" class="form-control" min="1" required />
                                <span asp-validation-for="Movie.Duration" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Image URL -->
                        <div class="mb-3">
                            <label asp-for="Movie.imageUrl" class="form-label">Image URL</label>
                            <input asp-for="Movie.imageUrl" type="url" class="form-control" placeholder="https://example.com/image.jpg" />
                            <span asp-validation-for="Movie.imageUrl" class="text-danger"></span>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label asp-for="Movie.Description" class="form-label">Description</label>
                            <textarea asp-for="Movie.Description" class="form-control" rows="4" placeholder="Enter movie description..."></textarea>
                            <span asp-validation-for="Movie.Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <!-- Language -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Movie.Language" class="form-label">Language</label>
                                <input asp-for="Movie.Language" class="form-control" placeholder="e.g., English, Spanish" />
                                <span asp-validation-for="Movie.Language" class="text-danger"></span>
                            </div>

                            <!-- Country -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Movie.Country" class="form-label">Country</label>
                                <input asp-for="Movie.Country" class="form-control" placeholder="e.g., USA, UK" />
                                <span asp-validation-for="Movie.Country" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Rating -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Movie.Rating" class="form-label">Rating (0-10)</label>
                                <input asp-for="Movie.Rating" type="number" step="0.1" min="0" max="10" class="form-control" />
                                <span asp-validation-for="Movie.Rating" class="text-danger"></span>
                            </div>

                            <!-- Release Date -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Movie.ReleaseDate" class="form-label">Release Date *</label>
                                <input asp-for="Movie.ReleaseDate" type="date" class="form-control" required />
                                <span asp-validation-for="Movie.ReleaseDate" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Grade (Single Select from API) -->
                        <div class="mb-3">
                            <label asp-for="Movie.grade" class="form-label">Grade</label>
                            <select asp-for="Movie.grade" class="form-select" asp-items="@Model.AvailableGradesSelectList">
                                <option value="">-- Select Grade --</option>
                            </select>
                            <span asp-validation-for="Movie.grade" class="text-danger"></span>
                        </div>

                        <!-- Cast (Multiple Select with PersonDao) -->
                        <div class="mb-3">
                            <label class="form-label">Cast</label>
                            <div class="cast-container">
                                <div class="input-group mb-2">
                                    <select id="castSelect" class="form-select">
                                        <option value="">-- Select Cast Member --</option>
                                        @if (Model.AvailableCast != null)
                                        {
                                            @foreach (var person in Model.AvailableCast)
                                            {
                                                <option value="@person.PersonId">@person.PersonName</option>
                                            }
                                        }
                                    </select>
                                    <button type="button" class="btn btn-outline-secondary" onclick="addCastMember()">Add</button>
                                </div>
                                <div id="castList" class="cast-list">
                                    <!-- Selected cast members will appear here -->
                                </div>
                            </div>
                            <!-- Hidden inputs for cast members -->
                            <div id="castHiddenInputs"></div>
                        </div>

                        <!-- Genres (Multiple Select from API) -->
                        <div class="mb-3">
                            <label class="form-label">Genres</label>
                            <div class="genre-container">
                                <div class="input-group mb-2">
                                    <select id="genreSelect" class="form-select">
                                        <option value="">-- Select Genre --</option>
                                        @if (Model.AvailableGenres != null)
                                        {
                                            @foreach (var genre in Model.AvailableGenres)
                                            {
                                                <option value="@genre.GenresId">@genre.GenresName</option>
                                            }
                                        }
                                    </select>
                                    <button type="button" class="btn btn-outline-secondary" onclick="addGenre()">Add</button>
                                </div>
                                <div id="genreList" class="genre-list">
                                    <!-- Selected genres will appear here -->
                                </div>
                            </div>
                            <!-- Hidden inputs for genres -->
                            <div id="genreHiddenInputs"></div>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="/Movies" class="btn btn-secondary me-md-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Add Movie</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .cast-list, .genre-list {
        min-height: 60px;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.5rem;
        background-color: #f8f9fa;
        max-height: 200px;
        overflow-y: auto;
    }

    .cast-item, .genre-item {
        display: block;
        background-color: #007bff;
        color: white;
        padding: 0.5rem;
        margin: 0.25rem 0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        position: relative;
    }

        .cast-item .cast-info {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .cast-item .cast-details {
            flex: 1;
        }

        .cast-item .cast-name {
            font-weight: bold;
            margin-bottom: 0.25rem;
        }

        .cast-item .cast-meta {
            font-size: 0.75rem;
            opacity: 0.9;
        }

        .cast-item .remove-btn, .genre-item .remove-btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-weight: bold;
            font-size: 1.1rem;
            position: absolute;
            top: 0.25rem;
            right: 0.5rem;
        }

            .cast-item .remove-btn:hover, .genre-item .remove-btn:hover {
                color: #ffcccc;
            }

    .genre-item {
        display: inline-block;
        margin: 0.125rem;
        padding: 0.25rem 0.5rem;
        background-color: #28a745;
    }
</style>

<script>
    let castMembers = [];
    let selectedGenres = [];
    let castIndex = 0;
    let genreIndex = 0;

    function addCastMember() {
        const castSelect = document.getElementById('castSelect');
        const personId = castSelect.value;
        const personName = castSelect.options[castSelect.selectedIndex].text;

        if (!personId) {
            alert('Please select a cast member');
            return;
        }

        // Check if person already exists
        if (castMembers.some(member => member.personId === personId)) {
            alert('This person is already in the cast list');
            return;
        }

        const person = {
            personId: personId,
            personName: personName
        };

        castMembers.push(person);

        // Add to display list
        const castList = document.getElementById('castList');
        const castItem = document.createElement('div');
        castItem.className = 'cast-item';

        castItem.innerHTML = `
            <div class="cast-info">
                <div class="cast-details">
                    <div class="cast-name">${person.personName}</div>
                </div>
                <button type="button" class="remove-btn" onclick="removeCastMember('${personId}', this)">×</button>
            </div>
        `;
        castList.appendChild(castItem);

        // Add hidden input for the person
        const hiddenInputs = document.getElementById('castHiddenInputs');
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = `Movie.cast[${castIndex}]`;
        hiddenInput.value = personId;
        hiddenInput.id = `cast_${personId}`;
        hiddenInputs.appendChild(hiddenInput);

        castIndex++;
        castSelect.value = '';
    }

    function removeCastMember(personId, button) {
        // Remove from array
        const index = castMembers.findIndex(member => member.personId === personId);
        if (index > -1) {
            castMembers.splice(index, 1);
        }

        // Remove from display
        button.closest('.cast-item').remove();

        // Remove hidden input
        const hiddenInput = document.getElementById(`cast_${personId}`);
        if (hiddenInput) {
            hiddenInput.remove();
        }
    }

    function addGenre() {
        const genreSelect = document.getElementById('genreSelect');
        const genreId = genreSelect.value;
        const genreName = genreSelect.options[genreSelect.selectedIndex].text;

        if (!genreId) {
            alert('Please select a genre');
            return;
        }

        // Check if genre already selected
        if (selectedGenres.some(genre => genre.id === genreId)) {
            alert('This genre is already selected');
            return;
        }

        const genre = { id: genreId, name: genreName };
        selectedGenres.push(genre);

        // Add to display list
        const genreList = document.getElementById('genreList');
        const genreItem = document.createElement('span');
        genreItem.className = 'genre-item';
        genreItem.innerHTML = `${genreName} <button type="button" class="remove-btn" onclick="removeGenre('${genreId}', this)">×</button>`;
        genreList.appendChild(genreItem);

        // Add hidden input
        const hiddenInputs = document.getElementById('genreHiddenInputs');
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = `Movie.genres[${genreIndex}]`;
        hiddenInput.value = genreId;
        hiddenInput.id = `genre_${genreId}`;
        hiddenInputs.appendChild(hiddenInput);

        genreIndex++;
        genreSelect.value = '';
    }

    function removeGenre(genreId, button) {
        // Remove from array
        const index = selectedGenres.findIndex(genre => genre.id === genreId);
        if (index > -1) {
            selectedGenres.splice(index, 1);
        }

        // Remove from display
        button.parentElement.remove();

        // Remove hidden input
        const hiddenInput = document.getElementById(`genre_${genreId}`);
        if (hiddenInput) {
            hiddenInput.remove();
        }
    }
</script>