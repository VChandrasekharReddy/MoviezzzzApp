@page
@model PersonModel
@{
    ViewData["Title"] = "Person Management";
}

<div class="container mt-4">
    <h1 class="mb-4">Person Management</h1>

    <!-- Add/Edit Person Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h3>Add New Person</h3>
        </div>
        <div class="card-body">
            <form method="post">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label asp-for="PersonDto.PersonName" class="form-label">Person Name</label>
                            <input asp-for="PersonDto.PersonName" class="form-control" placeholder="Enter person name" />
                            <span asp-validation-for="PersonDto.PersonName" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="PersonDto.imageUrl" class="form-label">Image URL</label>
                            <input asp-for="PersonDto.imageUrl" class="form-control" placeholder="Enter image URL" />
                            <span asp-validation-for="PersonDto.imageUrl" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="PersonDto.DateOfBirth" class="form-label">Date of Birth</label>
                            <input asp-for="PersonDto.DateOfBirth" class="form-control" type="date" />
                            <span asp-validation-for="PersonDto.DateOfBirth" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label asp-for="PersonDto.Biography" class="form-label">Biography</label>
                            <textarea asp-for="PersonDto.Biography" class="form-control" rows="5" placeholder="Enter biography"></textarea>
                            <span asp-validation-for="PersonDto.Biography" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="form-group mb-3">
                    <button type="submit" class="btn btn-primary">Add Person</button>
                    <button type="reset" class="btn btn-secondary">Reset</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Persons Cards -->
    <div class="mb-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Persons Gallery</h3>
            <span class="badge bg-primary">@(Model.persons?.Count ?? 0) Person(s)</span>
        </div>

        @if (Model.persons != null && Model.persons.Any())
        {
            <div class="row g-4">
                @foreach (var person in Model.persons)
                {
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <div class="person-card">
                            <div class="person-card-header">
                                @if (!string.IsNullOrEmpty(person.imageUrl))
                                {
                                    <img src="@person.imageUrl" alt="@person.PersonName" class="person-image" />
                                }
                                else
                                {
                                    <div class="person-image-placeholder">
                                        <i class="fas fa-user fa-3x"></i>
                                    </div>
                                }
                                <div class="person-card-overlay">
                                    <div class="person-actions">
                                        <button type="button" class="btn btn-light btn-sm" onclick="viewPerson('@person.PersonId')" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-warning btn-sm" onclick="editPerson('@person.PersonId')" title="Edit Person">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="deletePerson('@person.PersonId')" title="Delete Person">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="person-card-body">
                                <h5 class="person-name">@person.PersonName</h5>
                                <p class="person-birthdate">
                                    <i class="fas fa-calendar-alt text-muted me-2"></i>
                                    @person.DateOfBirth.ToString("MMMM dd, yyyy")
                                </p>

                                @if (!string.IsNullOrEmpty(person.Biography))
                                {
                                    <p class="person-biography">
                                        @if (person.Biography.Length > 120)
                                        {
                                            @person.Biography.Substring(0, 120)
                            
                                            <span class="text-muted">...</span>
                                        }
                                        else
                                        {
                                            @person.Biography
                                        }
                                    </p>
                                }
                                else
                                {
                                    <p class="person-biography text-muted">No biography available</p>
                                }

                                <div class="person-roles">
                                    @if (person.Roles != null && person.Roles.Any())
                                    {
                                        <div class="roles-container">
                                            <small class="text-muted mb-1 d-block">
                                                <i class="fas fa-tags me-1"></i>Roles:
                                            </small>
                                            <div class="roles-badges">
                                                @foreach (var role in person.Roles.Take(3))
                                                {
                                                    <span class="badge bg-gradient-primary">@role.RoleName</span>
                                                }
                                                @if (person.Roles.Count > 3)
                                                {
                                                    <span class="badge bg-secondary">+@(person.Roles.Count - 3) more</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <small class="text-muted">
                                            <i class="fas fa-tags me-1"></i>No roles assigned
                                        </small>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-users fa-4x"></i>
                </div>
                <h4>No persons found</h4>
                <p class="text-muted">Add your first person using the form above to get started.</p>
            </div>
        }
    </div>
</div>

<!-- Person Details Modal -->
<div class="modal fade" id="personModal" tabindex="-1" aria-labelledby="personModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="personModalLabel">Person Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="personModalBody">
                <!-- Person details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .person-card {
            background: #fff;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
            height: 100%;
        }

            .person-card:hover {
                transform: translateY(-10px);
                box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            }

        .person-card-header {
            position: relative;
            height: 250px;
            overflow: hidden;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .person-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .person-image-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: rgba(255,255,255,0.8);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .person-card-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .person-card:hover .person-card-overlay {
            opacity: 1;
        }

        .person-card:hover .person-image {
            transform: scale(1.1);
        }

        .person-actions {
            display: flex;
            gap: 10px;
        }

            .person-actions .btn {
                border-radius: 50%;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
            }

                .person-actions .btn:hover {
                    transform: scale(1.1);
                }

        .person-card-body {
            padding: 20px;
        }

        .person-name {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2c3e50;
        }

        .person-birthdate {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 15px;
        }

        .person-biography {
            font-size: 0.95rem;
            line-height: 1.6;
            color: #495057;
            margin-bottom: 15px;
        }

        .person-roles {
            margin-top: auto;
        }

        .roles-container {
            margin-top: 15px;
        }

        .roles-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 5px;
        }

            .roles-badges .badge {
                font-size: 0.75rem;
                padding: 4px 8px;
                border-radius: 12px;
            }

        .bg-gradient-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }

        .empty-state-icon {
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h4 {
            margin-bottom: 10px;
            color: #495057;
        }

        /* Responsive adjustments */
       

        /* Animation for loading */
        .person-card {
            animation: fadeInUp 0.5s ease forwards;
        }

        

        /* Stagger animation for cards */
        .person-card:nth-child(1) {
            animation-delay: 0.1s;
        }

        .person-card:nth-child(2) {
            animation-delay: 0.2s;
        }

        .person-card:nth-child(3) {
            animation-delay: 0.3s;
        }

        .person-card:nth-child(4) {
            animation-delay: 0.4s;
        }

        .person-card:nth-child(5) {
            animation-delay: 0.5s;
        }

        .person-card:nth-child(6) {
            animation-delay: 0.6s;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function viewPerson(personId) {
            // Find the person data from the model
            const persons = @Html.Raw(Json.Serialize(Model.persons));
            const person = persons.find(p => p.personId === personId);

            if (person) {
                let modalContent = `
                    <div class="row">
                        <div class="col-md-4">
                            ${person.imageUrl ?
                                `<img src="${person.imageUrl}" alt="${person.personName}" class="img-fluid rounded" />` :
                                `<div class="bg-secondary text-white d-flex align-items-center justify-content-center" style="height: 200px; border-radius: 8px;">
                                    <i class="fas fa-user fa-3x"></i>
                                </div>`
                            }
                        </div>
                        <div class="col-md-8">
                            <h4>${person.personName}</h4>
                            <p><strong>Date of Birth:</strong> ${new Date(person.dateOfBirth).toLocaleDateString()}</p>
                            ${person.biography ? `<p><strong>Biography:</strong> ${person.biography}</p>` : ''}
                            ${person.roles && person.roles.length > 0 ?
                                `<p><strong>Roles:</strong> ${person.roles.map(r => `<span class="badge bg-info me-1">${r.roleName}</span>`).join('')}</p>` :
                                '<p><strong>Roles:</strong> <span class="text-muted">No roles assigned</span></p>'
                            }
                        </div>
                    </div>
                `;

                document.getElementById('personModalBody').innerHTML = modalContent;
                document.getElementById('personModalLabel').textContent = `${person.personName} - Details`;

                const modal = new bootstrap.Modal(document.getElementById('personModal'));
                modal.show();
            }
        }

        function editPerson(personId) {
            // Redirect to edit page or implement inline editing
            window.location.href = `/Person/Edit/${personId}`;
        }

        function deletePerson(personId) {
            if (confirm('Are you sure you want to delete this person?')) {
                // Implement delete functionality
                fetch(`/Person/Delete/${personId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error deleting person');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting person');
                });
            }
        }

        // Auto-hide alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                if (alert.classList.contains('alert-success') || alert.classList.contains('alert-info')) {
                    alert.style.transition = 'opacity 0.5s';
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 500);
                }
            });
        }, 5000);
    </script>
}