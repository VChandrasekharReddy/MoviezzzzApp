// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviezzzzApp.config;

#nullable disable

namespace MoviezzzzApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenresMovieDetails", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieDetailsMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MovieDetailsMovieId");

                    b.HasIndex("MovieDetailsMovieId");

                    b.ToTable("GenresMovieDetails");
                });

            modelBuilder.Entity("MovieDetailsPerson", b =>
                {
                    b.Property<Guid>("CastPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieDetailsMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CastPersonId", "MovieDetailsMovieId");

                    b.HasIndex("MovieDetailsMovieId");

                    b.ToTable("MovieDetailsPerson");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Genres", b =>
                {
                    b.Property<Guid>("GenresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenresName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenresId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GrageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradeId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Movie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.MovieDetails", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId");

                    b.HasIndex("GradeId");

                    b.ToTable("MovieDetails");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PersonRole", b =>
                {
                    b.Property<Guid>("PersonsPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonsPersonId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("PersonRole");
                });

            modelBuilder.Entity("GenresMovieDetails", b =>
                {
                    b.HasOne("MoviezzzzApp.models.entites.Genres", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviezzzzApp.models.entites.MovieDetails", null)
                        .WithMany()
                        .HasForeignKey("MovieDetailsMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDetailsPerson", b =>
                {
                    b.HasOne("MoviezzzzApp.models.entites.Person", null)
                        .WithMany()
                        .HasForeignKey("CastPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviezzzzApp.models.entites.MovieDetails", null)
                        .WithMany()
                        .HasForeignKey("MovieDetailsMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.MovieDetails", b =>
                {
                    b.HasOne("MoviezzzzApp.models.entites.Grade", "Grade")
                        .WithMany("MovieDetails")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviezzzzApp.models.entites.Movie", "Movie")
                        .WithOne("MovieDetails")
                        .HasForeignKey("MoviezzzzApp.models.entites.MovieDetails", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("PersonRole", b =>
                {
                    b.HasOne("MoviezzzzApp.models.entites.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviezzzzApp.models.entites.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Grade", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("MoviezzzzApp.models.entites.Movie", b =>
                {
                    b.Navigation("MovieDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
